# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ffaker/all/ffaker.rbi
#
# ffaker-2.16.0

module FFaker
  def self.bothify(masks); end
  def self.hexify(*masks); end
  def self.letterify(*masks); end
  def self.numerify(*masks); end
  extend FFaker::ModuleUtils
end
module FFaker::RandomUtils
  def fetch_sample(list, options = nil); end
  def rand(max = nil); end
  def shuffle(list); end
end
module FFaker::ArrayUtils
  def freeze_all; end
  def rand; end
  def random_pick(num); end
  def self.const_array(argument); end
  def self.freeze_all(array); end
  def self.rand(array); end
  def self.random_pick(array, num); end
  def self.shuffle(array); end
  def shuffle; end
  extend FFaker::RandomUtils
end
class FFaker::UniqueUtils
  def add_results_to_hash(name, *arguments); end
  def clear; end
  def initialize(generator, max_retries); end
  def method_missing(name, *arguments); end
  def respond_to_missing?(method_name, include_private = nil); end
  def self.clear; end
end
class FFaker::UniqueUtils::RetryLimitExceeded < StandardError
end
module FFaker::ModuleUtils
  def const_missing(const_name); end
  def k(arg); end
  def underscore(string); end
  def unique(max_retries = nil); end
  include FFaker::RandomUtils
end
module FFaker::Random
  def self.new_rng; end
  def self.rand(max = nil); end
  def self.reset!; end
  def self.rng; end
  def self.seed; end
  def self.seed=(new_seed); end
end
