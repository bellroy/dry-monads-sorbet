# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ffaker` gem.
# Please instead update this file by running `bin/tapioca gem ffaker`.

# typed: true

module FFaker
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils

  class << self
    def bothify(masks); end
    def hexify(*masks); end
    def letterify(*masks); end
    def numerify(*masks); end
  end
end

module FFaker::AWS
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AWS

  def instance_tenancy; end
  def instance_type; end
  def offering_type; end
  def product_description; end
end

module FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address

  def building_number; end
  def city; end
  def city_prefix; end
  def city_suffix; end
  def country(given_code = T.unsafe(nil)); end
  def country_code(given_country = T.unsafe(nil)); end
  def neighborhood; end
  def secondary_address; end
  def street_address(include_secondary = T.unsafe(nil)); end
  def street_name; end
  def street_suffix; end
  def time_zone; end
  def uk_country; end
  def uk_county; end
  def uk_postcode; end
  def us_state; end
  def us_state_abbr; end
  def zip_code; end
end

FFaker::Address::CITY_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::Address::COMPASS_DIRECTIONS = T.let(T.unsafe(nil), Array)
FFaker::Address::SEC_ADDR = T.let(T.unsafe(nil), Array)

module FFaker::AddressAU
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressAU

  def full_address(st_abbr = T.unsafe(nil)); end
  def postcode(st_abbr = T.unsafe(nil)); end
  def state; end
  def state_abbr; end
  def suburb(st_abbr = T.unsafe(nil), p_code = T.unsafe(nil)); end
  def time_zone(st_abbr = T.unsafe(nil)); end
end

FFaker::AddressAU::POSTCODE = T.let(T.unsafe(nil), Hash)
FFaker::AddressAU::STATE = T.let(T.unsafe(nil), Array)
FFaker::AddressAU::STATE_ABBR = T.let(T.unsafe(nil), Array)
FFaker::AddressAU::SUBURB = T.let(T.unsafe(nil), Hash)
FFaker::AddressAU::TIME_ZONE = T.let(T.unsafe(nil), Hash)

module FFaker::AddressBR
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressBR

  def city; end
  def full_address; end
  def state; end
  def state_abbr; end
  def street; end
  def street_prefix; end
  def zip_code; end
end

FFaker::AddressBR::STREET_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::AddressCA
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressCA

  def city; end
  def postal_code; end
  def province; end
  def province_abbr; end
end

FFaker::AddressCA::POSTAL_CODE_CHARS = T.let(T.unsafe(nil), Array)
FFaker::AddressCA::POSTAL_CODE_FORMAT = T.let(T.unsafe(nil), String)
FFaker::AddressCA::PROVINCE_ABBRS = T.let(T.unsafe(nil), Array)

module FFaker::AddressCH
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressCH

  def canton_abbr; end
  def postal_code; end
end

module FFaker::AddressCHDE
  include ::FFaker::Address
  include ::FFaker::AddressCH
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressCH
  extend ::FFaker::AddressCHDE

  def canton; end
end

module FFaker::AddressCHFR
  include ::FFaker::Address
  include ::FFaker::AddressCH
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressCH
  extend ::FFaker::AddressCHFR

  def canton; end
end

module FFaker::AddressCHIT
  include ::FFaker::Address
  include ::FFaker::AddressCH
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressCH
  extend ::FFaker::AddressCHIT

  def canton; end
end

module FFaker::AddressDA
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressDA

  def city; end
  def full_address; end
  def kommune; end
  def post_nr; end
  def region; end
  def state; end
  def street_address; end
  def street_name; end
  def zip_code; end
end

FFaker::AddressDA::REGION = T.let(T.unsafe(nil), Array)
FFaker::AddressDA::STATE = T.let(T.unsafe(nil), Array)

module FFaker::AddressDE
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressDE

  def city; end
  def state; end
  def street_address; end
  def street_name; end
  def zip_code; end

  private

  def random_type_of_street; end
end

module FFaker::AddressFI
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressFI

  def city; end
  def full_address; end
  def random_country; end
  def street_address; end
  def street_name; end
  def street_nbr; end
  def zip_code; end
end

FFaker::AddressFI::STREET_NBR_FORMATS = T.let(T.unsafe(nil), Array)

module FFaker::AddressFR
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressFR

  def city; end
  def full_address; end
  def postal_code; end
  def region; end
  def street_address; end
end

FFaker::AddressFR::MOD = T.let(T.unsafe(nil), Array)
FFaker::AddressFR::NUM = T.let(T.unsafe(nil), Array)
FFaker::AddressFR::POSTAL_CODE_FORMATS = T.let(T.unsafe(nil), Array)
FFaker::AddressFR::SEP = T.let(T.unsafe(nil), Array)
FFaker::AddressFR::TYPE = T.let(T.unsafe(nil), Array)

module FFaker::AddressGR
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressGR

  def city; end
  def region; end
  def street_address; end
  def street_name; end
  def street_nbr; end
  def zip_code; end
end

FFaker::AddressGR::REGION = T.let(T.unsafe(nil), Array)
FFaker::AddressGR::STATE = T.let(T.unsafe(nil), Array)
FFaker::AddressGR::STREET_NUMBER = T.let(T.unsafe(nil), Array)
FFaker::AddressGR::STREET_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::AddressID
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressID

  def city; end
  def state; end
  def state_abbr; end
  def street; end
  def street_prefix; end
  def zip_code; end
end

FFaker::AddressID::STREET_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::AddressIN
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressIN

  def city; end
  def country; end
  def country_code; end
  def pincode; end
  def state; end
  def state_abbr; end
  def state_and_union_territory; end
  def state_and_union_territory_abbr; end
  def time_zone; end
  def union_territory; end
  def union_territory_abbr; end
  def zip_code; end
end

module FFaker::AddressIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AddressIT

  def city; end
  def full_address; end
  def postal_code; end
  def region; end
  def street_address; end
end

FFaker::AddressIT::NUM = T.let(T.unsafe(nil), Array)
FFaker::AddressIT::POSTAL_CODE_FORMATS = T.let(T.unsafe(nil), Array)
FFaker::AddressIT::SEP = T.let(T.unsafe(nil), Array)
FFaker::AddressIT::TYPE = T.let(T.unsafe(nil), Array)

module FFaker::AddressJA
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressJA

  def address; end
  def city; end
  def county; end
  def designated_city; end
  def designated_city_address; end
  def land_number; end
  def other_address; end
  def postal_code; end
  def prefecture; end
  def street; end
  def tokyo_ward; end
  def tokyo_ward_address; end
  def village; end
  def ward; end
end

FFaker::AddressJA::LAND_NUMBER_FORMATS = T.let(T.unsafe(nil), Array)
FFaker::AddressJA::ZIP_FORMATS = T.let(T.unsafe(nil), Array)

module FFaker::AddressKR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AddressKR

  def address_detail; end
  def borough; end
  def building_name; end
  def city; end
  def land_address; end
  def land_number; end
  def metropolitan_city; end
  def old_postal_code; end
  def postal_code; end
  def province; end
  def road_addess; end
  def street; end
  def town; end
end

FFaker::AddressKR::BUILDING_DONGS = T.let(T.unsafe(nil), Array)
FFaker::AddressKR::BUILDING_SUFFIXES = T.let(T.unsafe(nil), Array)
FFaker::AddressKR::METROPOLITAN_CITIES = T.let(T.unsafe(nil), Array)
FFaker::AddressKR::PROVINCES = T.let(T.unsafe(nil), Array)
FFaker::AddressKR::STREET_SUFFIXES = T.let(T.unsafe(nil), Array)
FFaker::AddressKR::TOWN_SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::AddressMX
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AddressMX

  def municipality(st_abbr = T.unsafe(nil)); end
  def postal_code; end
  def state; end
  def state_abbr(st_name = T.unsafe(nil)); end
  def zip_code; end
end

module FFaker::AddressNL
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressNL

  def city; end
  def postal_code; end
  def province; end
  def street_name; end
  def zip_code; end

  private

  def random_type_of_street; end
end

module FFaker::AddressPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AddressPL

  def building_number; end
  def city; end
  def full_address(include_country = T.unsafe(nil), include_secondary = T.unsafe(nil)); end
  def postal_code; end
  def province; end
  def secondary_number; end
  def square; end
  def square_prefix; end
  def state; end
  def street; end
  def street_address(include_secondary = T.unsafe(nil)); end
  def street_name; end
  def street_prefix; end
  def voivodeship; end
  def voivodeship_abbr; end
  def voivodeship_capital_city; end
  def zip_code; end
end

FFaker::AddressPL::SQUARE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::AddressPL::STREET_PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::AddressRU
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressRU

  def city; end
  def province; end
  def street_address; end
  def street_name; end
  def street_number; end
  def zip_code; end
end

FFaker::AddressRU::POSTAL_CODE_FORMAT = T.let(T.unsafe(nil), Array)
FFaker::AddressRU::STREET_NBR_FORMATS = T.let(T.unsafe(nil), Array)

module FFaker::AddressSE
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressSE

  def city; end
  def full_address; end
  def random_country; end
  def street_address; end
  def street_name; end
  def street_nbr; end
  def zip_code; end
end

FFaker::AddressSE::STREET_NBR_FORMATS = T.let(T.unsafe(nil), Array)
FFaker::AddressSE::ZIP_FORMATS = T.let(T.unsafe(nil), Array)

module FFaker::AddressSN
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressSN

  def arrondissement; end
  def departement; end
  def region; end
end

module FFaker::AddressUA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AddressUA

  def appartment_number; end
  def building_number; end
  def city; end
  def country; end
  def province; end
  def street_address(include_secondary = T.unsafe(nil)); end
  def street_name; end
  def zip_code; end

  private

  def numerify_mask(masks_arr, allow_first_zero = T.unsafe(nil)); end
end

FFaker::AddressUA::APPARTMENT_NUMBER_FORMATS = T.let(T.unsafe(nil), Array)
FFaker::AddressUA::BUILDING_NUMBER_FORMATS = T.let(T.unsafe(nil), Array)
FFaker::AddressUA::POSTAL_CODE_FORMAT = T.let(T.unsafe(nil), Array)

module FFaker::AddressUK
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressUK

  def country; end
  def county; end
  def postcode; end
end

FFaker::AddressUK::COUNTRY = T.let(T.unsafe(nil), Array)
FFaker::AddressUK::POSTCODE = T.let(T.unsafe(nil), Array)

module FFaker::AddressUS
  include ::FFaker::Address
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Address
  extend ::FFaker::AddressUS

  def continental_state; end
  def continental_state_abbr; end
  def state; end
  def state_abbr(st_name = T.unsafe(nil)); end
  def state_and_territories_abbr; end
  def zip_code; end

  private

  def capitalize_all_words(string); end
  def check_state_existence(state_name); end
  def find_abbr(state); end
end

FFaker::AddressUS::CONTINENTAL_STATE = T.let(T.unsafe(nil), Array)
FFaker::AddressUS::CONTINENTAL_STATE_ABBR = T.let(T.unsafe(nil), Array)
FFaker::AddressUS::STATE = T.let(T.unsafe(nil), Array)
FFaker::AddressUS::STATE_ABBR = T.let(T.unsafe(nil), Array)
FFaker::AddressUS::ZIP_FORMATS = T.let(T.unsafe(nil), Array)

module FFaker::Airline
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Airline

  def flight_number; end
  def name; end
end

FFaker::Airline::NAMES_LIST = T.let(T.unsafe(nil), Array)

module FFaker::Animal
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Animal

  def common_name; end
end

module FFaker::AnimalCN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AnimalCN

  def common_name; end
end

module FFaker::AnimalES
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AnimalES

  def common_name; end
end

module FFaker::AnimalPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils

  private

  def common_name; end

  class << self
    def common_name; end
  end
end

module FFaker::AnimalUS
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::AnimalUS

  def common_name; end
end

module FFaker::ArrayUtils
  extend ::FFaker::RandomUtils

  def freeze_all; end
  def rand; end
  def random_pick(num); end
  def shuffle; end

  class << self
    def const_array(argument); end
    def freeze_all(array); end
    def rand(array); end
    def random_pick(array, num); end
    def shuffle(array); end
  end
end

module FFaker::Avatar
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Avatar

  def image(slug = T.unsafe(nil), size = T.unsafe(nil), format = T.unsafe(nil), bgset = T.unsafe(nil)); end

  private

  def check_passed_params(size, format, bgset); end
  def invalid_background_number; end
  def invalid_format_error; end
  def invalid_size_error; end
end

FFaker::Avatar::SUPPORTED_FORMATS = T.let(T.unsafe(nil), Array)
FFaker::BASE_LIB_PATH = T.let(T.unsafe(nil), String)

module FFaker::BaconIpsum
  include ::FFaker::Lorem
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Lorem
  extend ::FFaker::BaconIpsum

  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::Bank
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Bank

  def card_expiry_date(year_range: T.unsafe(nil), year_latest: T.unsafe(nil), format: T.unsafe(nil)); end
  def card_number; end
  def card_type; end
  def iban(country_code: T.unsafe(nil)); end

  private

  def check_country_existence(country_code); end
  def formatify_iban(code); end
end

FFaker::Bank::COUNTRIES = T.let(T.unsafe(nil), Hash)

module FFaker::Book
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Book

  def author; end
  def cover(slug = T.unsafe(nil), size = T.unsafe(nil), format = T.unsafe(nil), bgset = T.unsafe(nil)); end
  def description(sentence_count = T.unsafe(nil)); end
  def genre; end
  def isbn; end
  def orly_cover(name = T.unsafe(nil), book_author = T.unsafe(nil), top_text = T.unsafe(nil)); end
  def title; end

  private

  def simple_title; end
  def title_with_prefix; end
end

module FFaker::Boolean
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Boolean

  def maybe; end
  def random; end
  def sample; end
end

module FFaker::CheesyLingo
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CheesyLingo

  def paragraph(number_of_phrases = T.unsafe(nil)); end
  def sentence; end
  def title; end
  def word; end
  def words(count = T.unsafe(nil)); end
end

FFaker::CheesyLingo::TITLE_1 = T.let(T.unsafe(nil), Array)
FFaker::CheesyLingo::TITLE_2 = T.let(T.unsafe(nil), Array)

module FFaker::Code
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Code

  def ean; end
  def npi(legacy: T.unsafe(nil)); end
end

module FFaker::Color
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Color

  def hex_code; end
  def hsl_array; end
  def hsl_list; end
  def hsla_array; end
  def hsla_list; end
  def name; end
  def rgb_array; end
  def rgb_list; end
  def rgba_array; end
  def rgba_list; end

  private

  def random_hue_value; end
  def random_opacity_value; end
  def random_percentage_string; end
  def random_rgb_value; end
end

FFaker::Color::NAMES_LIST = T.let(T.unsafe(nil), Array)

module FFaker::ColorPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::ColorPL

  def name; end
end

FFaker::ColorPL::NAMES_LIST = T.let(T.unsafe(nil), Array)

module FFaker::ColorUA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::ColorUA

  def name; end
end

FFaker::ColorUA::NAMES_LIST = T.let(T.unsafe(nil), Array)

module FFaker::Company
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Company

  def bs; end
  def catch_phrase; end
  def name; end
  def position; end
  def suffix; end
end

FFaker::Company::POSITIONS = T.let(T.unsafe(nil), Array)
FFaker::Company::POSITION_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::Company::SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::CompanyCN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CompanyCN

  def name; end
  def suffix; end
  def type; end
end

FFaker::CompanyCN::SUFFIXES = T.let(T.unsafe(nil), Array)
FFaker::CompanyCN::TYPES = T.let(T.unsafe(nil), Array)

module FFaker::CompanyFR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CompanyFR

  def name; end
  def siren; end
  def siret; end
  def suffix; end
end

FFaker::CompanyFR::SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::CompanyIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CompanyIT

  def name; end
  def partita_iva; end
  def prefix; end
  def suffix; end
end

FFaker::CompanyIT::PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::CompanyIT::SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::CompanyJA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CompanyJA

  def name; end
  def position; end
end

FFaker::CompanyJA::DETAILED_TYPES = T.let(T.unsafe(nil), Array)
FFaker::CompanyJA::POSITIONS = T.let(T.unsafe(nil), Array)
FFaker::CompanyJA::TYPES = T.let(T.unsafe(nil), Array)

module FFaker::CompanySE
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CompanySE

  def name; end
  def suffix; end
end

FFaker::CompanySE::SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::Conference
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Conference

  def name; end
end

FFaker::Conference::CONFERENCE_LIST = T.let(T.unsafe(nil), Array)
module FFaker::CoursesFR; end

module FFaker::CoursesFR::Mathematiques
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CoursesFR::Mathematiques

  def lesson; end
end

module FFaker::CoursesFR::Philosophie
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::CoursesFR::Philosophie

  def lesson; end
end

module FFaker::Currency
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Currency

  def code; end
  def name; end
  def symbol; end
end

FFaker::Currency::CURRENCY_NAME = T.let(T.unsafe(nil), Array)

module FFaker::DizzleIpsum
  extend ::FFaker::Lorem
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::DizzleIpsum

  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::Education
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Education

  def degree; end
  def degree_short; end
  def major; end
  def school; end
  def school_generic_name; end
  def school_name; end
end

FFaker::Education::MAJOR_ADJ = T.let(T.unsafe(nil), Array)
FFaker::Education::SCHOOL_ADJ = T.let(T.unsafe(nil), Array)
FFaker::Education::SCHOOL_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::Education::SCHOOL_TYPE = T.let(T.unsafe(nil), Array)
FFaker::Education::SCHOOL_UNI = T.let(T.unsafe(nil), Array)

module FFaker::EducationCN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::EducationCN

  def degree; end
  def location; end
  def major; end
  def school; end
end

FFaker::EducationCN::DEGREE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::EducationCN::DEGREE_SUFFIX = T.let(T.unsafe(nil), Array)
FFaker::EducationCN::POSITION = T.let(T.unsafe(nil), Array)
FFaker::EducationCN::SCHOOL_UNI = T.let(T.unsafe(nil), Array)

module FFaker::Filesystem
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Filesystem

  def directory(directory_separator = T.unsafe(nil)); end
  def extension; end
  def file_name(dir = T.unsafe(nil), name = T.unsafe(nil), ext = T.unsafe(nil), directory_separator = T.unsafe(nil)); end
  def mime_type; end
end

module FFaker::Food
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Food

  def fruit; end
  def herb_or_spice; end
  def ingredient; end
  def meat; end
  def vegetable; end
end

module FFaker::FoodPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::FoodPL

  def diary; end
  def fermented; end
  def food; end
  def fruit; end
  def herb; end
  def meat; end
  def preserves; end
  def processed; end
  def spice; end
  def unprocessed; end
  def vegetable; end
end

module FFaker::FreedomIpsum
  include ::FFaker::Lorem
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Lorem
  extend ::FFaker::FreedomIpsum

  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::Game
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Game

  def category; end
  def mechanic; end
  def title; end

  private

  def simple_title; end
  def title_with_prefix; end
end

module FFaker::Gender
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Gender

  def binary; end
  def maybe; end
  def random; end
  def sample; end
end

FFaker::Gender::BINARY_GENDERS = T.let(T.unsafe(nil), Array)
FFaker::Gender::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderBR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderBR

  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderBR::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderCN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderCN

  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderCN::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderID
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderID

  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderID::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderIT

  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderIT::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderJA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderJA

  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderJA::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderJP
  include ::FFaker::GenderJA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderJA
end

module FFaker::GenderKR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderKR

  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderKR::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderPL

  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderPL::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::GenderRU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::GenderRU

  def binary; end
  def maybe; end
  def random; end
  def sample; end
end

FFaker::GenderRU::BINARY_GENDERS = T.let(T.unsafe(nil), Array)
FFaker::GenderRU::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::Geolocation
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Geolocation

  def boxed_coords(upper_left, lower_right); end
  def lat; end
  def lng; end
end

FFaker::Geolocation::LATLNG = T.let(T.unsafe(nil), Array)

module FFaker::Guid
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Guid

  def guid; end
end

FFaker::HEX = T.let(T.unsafe(nil), Array)

module FFaker::HTMLIpsum
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::HTMLIpsum

  def a(word_count = T.unsafe(nil)); end
  def body; end
  def dl(definitions = T.unsafe(nil)); end
  def fancy_string(count = T.unsafe(nil), include_breaks = T.unsafe(nil)); end
  def ol_long(items = T.unsafe(nil)); end
  def ol_short(items = T.unsafe(nil)); end
  def p(count = T.unsafe(nil), options = T.unsafe(nil)); end
  def table(rows = T.unsafe(nil)); end
  def ul_links(items = T.unsafe(nil)); end
  def ul_long(items = T.unsafe(nil)); end
  def ul_short(items = T.unsafe(nil)); end

  private

  def content_tag_for(element, content = T.unsafe(nil)); end
  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(word_count = T.unsafe(nil)); end
end

module FFaker::HealthcareIpsum
  include ::FFaker::Lorem
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Lorem
  extend ::FFaker::HealthcareIpsum

  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::HealthcareRU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::HealthcareRU

  def doctor_specialization; end
end

module FFaker::HipsterIpsum
  include ::FFaker::Lorem
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Lorem
  extend ::FFaker::HipsterIpsum

  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::Identification
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Identification

  def drivers_license; end
  def ethnicity; end
  def gender; end
  def ssn; end
end

FFaker::Identification::ETHNICITIES = T.let(T.unsafe(nil), Array)
FFaker::Identification::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::IdentificationBR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationBR

  def cnpj; end
  def cnpj_verification_digits(cnpj); end
  def cpf; end
  def cpf_verification_digits(cpf); end
  def gender; end
  def pretty_cnpj; end
  def pretty_cpf; end
  def pretty_rg; end
  def rg; end

  private

  def document_verification_digits(verification_multipliers, document = T.unsafe(nil)); end
end

FFaker::IdentificationBR::CNPJ_VERIFICATION_MULTIPLIERS = T.let(T.unsafe(nil), Array)
FFaker::IdentificationBR::CPF_VERIFICATION_MULTIPLIERS = T.let(T.unsafe(nil), Array)
FFaker::IdentificationBR::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::IdentificationES
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationES

  def gender; end
end

FFaker::IdentificationES::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::IdentificationESCL
  extend ::FFaker::IdentificationES
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationESCL

  def rut; end

  private

  def dv(rut); end
end

module FFaker::IdentificationESCO
  include ::FFaker::IdentificationES
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationES
  extend ::FFaker::IdentificationESCO

  def blood_type; end
  def driver_license_category; end
  def drivers_license; end
  def expedition_date; end
  def id; end
end

FFaker::IdentificationESCO::BLOOD_TYPE = T.let(T.unsafe(nil), Array)
FFaker::IdentificationESCO::LICENSE_CATEGORY = T.let(T.unsafe(nil), Array)

module FFaker::IdentificationIN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationIN

  def aadhaar; end
end

FFaker::IdentificationIN::AADHAAR_FORMAT = T.let(T.unsafe(nil), Array)

module FFaker::IdentificationIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationIT

  def drivers_license; end
  def ethnicity; end
  def gender; end
  def ssn; end
end

FFaker::IdentificationIT::ETHNICITIES = T.let(T.unsafe(nil), Array)
FFaker::IdentificationIT::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::IdentificationKr
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationKr

  def rrn; end
end

module FFaker::IdentificationMX
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationMX

  def curp; end
  def rfc; end
  def rfc_persona_fisica; end
  def rfc_persona_moral; end

  private

  def date; end
end

FFaker::IdentificationMX::CONSONANTS = T.let(T.unsafe(nil), Array)
FFaker::IdentificationMX::HOMOCLAVE = T.let(T.unsafe(nil), Array)
FFaker::IdentificationMX::VOWELS = T.let(T.unsafe(nil), Array)

module FFaker::IdentificationPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationPL

  def drivers_license; end
  def id; end
  def identity_card; end
  def pesel; end

  private

  def generate_valid_pesel_date; end
  def identity_card_checksum(letter_part, number_part); end
  def pesel_birthdate(date); end
  def pesel_century_differentiator(year); end
  def pesel_checksum(date, serial_number); end
end

module FFaker::IdentificationTW
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::IdentificationTW

  def id; end
end

FFaker::IdentificationTW::AREA_CODE = T.let(T.unsafe(nil), Hash)

module FFaker::Image
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Image

  def file(size = T.unsafe(nil), format = T.unsafe(nil), bg_color = T.unsafe(nil), text_color = T.unsafe(nil), text = T.unsafe(nil)); end
  def url(size = T.unsafe(nil), format = T.unsafe(nil), bg_color = T.unsafe(nil), text_color = T.unsafe(nil), text = T.unsafe(nil)); end

  private

  def check_format!(format); end
  def check_size!(size); end
end

FFaker::Image::SUPPORTED_FORMATS = T.let(T.unsafe(nil), Array)

module FFaker::Internet
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Internet

  def disposable_email(name = T.unsafe(nil)); end
  def domain_name; end
  def domain_suffix; end
  def domain_word; end
  def email(name = T.unsafe(nil)); end
  def free_email(name = T.unsafe(nil)); end
  def http_url; end
  def ip_v4_address; end
  def mac(delimiter = T.unsafe(nil)); end
  def password(min_length = T.unsafe(nil), max_length = T.unsafe(nil)); end
  def safe_email(name = T.unsafe(nil)); end
  def slug(words = T.unsafe(nil), glue = T.unsafe(nil)); end
  def uri(protocol); end
  def user_name(name = T.unsafe(nil)); end

  private

  def sanitize(string); end
end

FFaker::Internet::BYTE = T.let(T.unsafe(nil), Array)
FFaker::Internet::DISPOSABLE_HOSTS = T.let(T.unsafe(nil), Array)
FFaker::Internet::DOMAIN_SUFFIXES = T.let(T.unsafe(nil), Array)
FFaker::Internet::HOSTS = T.let(T.unsafe(nil), Array)
FFaker::Internet::MAC_LIMIT = T.let(T.unsafe(nil), Integer)
FFaker::Internet::SAFE_DOMAIN_SUFFIXES = T.let(T.unsafe(nil), Array)
FFaker::Internet::SLUG_DELIMITERS = T.let(T.unsafe(nil), Array)

module FFaker::InternetSE
  include ::FFaker::Internet
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Internet
  extend ::FFaker::InternetSE

  def company_name_single_word; end
  def disposable_email(name = T.unsafe(nil)); end
  def domain_name; end
  def domain_suffix; end
  def domain_word; end
  def email(name = T.unsafe(nil)); end
  def free_email(name = T.unsafe(nil)); end
  def http_url; end
  def ip_v4_address; end
  def join_to_user_name(array_parts); end
  def login_user_name; end
  def slug(words = T.unsafe(nil), glue = T.unsafe(nil)); end
  def uri(protocol); end
  def user_name(name = T.unsafe(nil)); end
  def user_name_from_name(name); end
  def user_name_random; end
  def user_name_variant_long; end
  def user_name_variant_short; end
end

FFaker::InternetSE::BYTE = T.let(T.unsafe(nil), Array)
FFaker::InternetSE::DISPOSABLE_HOSTS = T.let(T.unsafe(nil), Array)
FFaker::InternetSE::DOMAIN_SUFFIXES = T.let(T.unsafe(nil), Array)
FFaker::InternetSE::HOSTS = T.let(T.unsafe(nil), Array)
FFaker::InternetSE::SLUG_DELIMITERS = T.let(T.unsafe(nil), Array)

module FFaker::Job
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Job

  def title; end
end

module FFaker::JobBR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::JobBR

  def title; end
end

module FFaker::JobCN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::JobCN

  def title; end
end

module FFaker::JobFR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::JobFR

  def title; end
end

FFaker::JobFR::JOB_ADJECTIVES = T.let(T.unsafe(nil), Array)

module FFaker::JobIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::JobIT

  def title; end
end

module FFaker::JobJA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::JobJA

  def title; end
end

module FFaker::JobKR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::JobKR

  def title; end
end

module FFaker::JobVN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::JobVN

  def title; end
end

FFaker::LETTERS = T.let(T.unsafe(nil), Array)

module FFaker::Locale
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Locale

  def code(given_language = T.unsafe(nil)); end
  def language(given_code = T.unsafe(nil)); end
end

module FFaker::Lorem
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Lorem

  def characters(character_count = T.unsafe(nil)); end
  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremAR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremAR

  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremBR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremBR

  def characters(character_count = T.unsafe(nil)); end
  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremCN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremCN

  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremFR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremFR

  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremIE
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremIE

  def paragraph; end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase; end
  def phrases(sentence_count = T.unsafe(nil)); end
  def question; end
  def sentence; end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremIT

  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremJA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremJA

  def character; end
  def characters(count = T.unsafe(nil)); end
  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(count = T.unsafe(nil)); end
  def sentence; end
  def sentences(count = T.unsafe(nil)); end
  def word; end
  def words(count = T.unsafe(nil)); end
end

module FFaker::LoremKR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremKR

  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end
end

module FFaker::LoremPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremPL

  def character; end
  def characters(count = T.unsafe(nil)); end
  def paragraph(count = T.unsafe(nil)); end
  def paragraphs(count = T.unsafe(nil)); end
  def phrase(count = T.unsafe(nil)); end
  def phrases(count = T.unsafe(nil)); end
  def sentence(count = T.unsafe(nil)); end
  def sentences(count = T.unsafe(nil)); end
  def word; end
  def words(count = T.unsafe(nil)); end

  private

  def end_of_sentence; end
end

module FFaker::LoremRU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremRU

  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end

  private

  def capitalize_russian(string); end
  def sentence_type_mark; end
end

module FFaker::LoremUA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::LoremUA

  def paragraph(sentence_count = T.unsafe(nil)); end
  def paragraphs(paragraph_count = T.unsafe(nil)); end
  def phrase(word_count = T.unsafe(nil)); end
  def phrases(sentence_count = T.unsafe(nil)); end
  def sentence(word_count = T.unsafe(nil)); end
  def sentences(sentence_count = T.unsafe(nil)); end
  def word; end
  def words(num = T.unsafe(nil)); end

  private

  def capitalize_ukrainian(string); end
  def sentence_type_mark; end
end

module FFaker::ModuleUtils
  include ::FFaker::RandomUtils

  def const_missing(const_name); end
  def k(arg); end
  def luhn_check(number); end
  def underscore(string); end
  def unique(max_retries = T.unsafe(nil)); end
end

module FFaker::Movie
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Movie

  def rating; end
  def title; end

  private

  def maybe_adj_or_adv; end
  def simple_title; end
  def title_from_formula; end
  def title_with_prefix; end
  def title_with_suffix; end
end

FFaker::Movie::COLORS = T.let(T.unsafe(nil), Array)
FFaker::Movie::RATINGS = T.let(T.unsafe(nil), Array)
FFaker::Movie::SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::Music
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Music

  def album; end
  def artist; end
  def genre; end
  def song; end
end

module FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name

  def female_name_with_prefix; end
  def female_name_with_prefix_suffix; end
  def female_name_with_suffix; end
  def female_prefix; end
  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def html_safe_last_name; end
  def html_safe_name; end
  def last_name; end
  def male_name_with_prefix; end
  def male_name_with_prefix_suffix; end
  def male_name_with_suffix; end
  def male_prefix; end
  def name; end
  def name_with_prefix; end
  def name_with_prefix_suffix; end
  def name_with_suffix; end
  def other_prefix; end
  def prefix; end
  def pronouns; end
  def suffix; end
end

FFaker::Name::FEMALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::Name::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::Name::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::Name::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::Name::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::Name::MALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::Name::OTHER_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::Name::PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::Name::SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameAR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameAR

  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def name_female; end
  def name_male; end
end

module FFaker::NameBR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameBR

  def female_name_with_prefix; end
  def female_prefix; end
  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def male_name_with_prefix; end
  def male_prefix; end
  def name; end
  def name_with_prefix; end
  def prefix; end
end

FFaker::NameBR::FEMALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameBR::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameBR::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameBR::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameBR::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameBR::MALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameBR::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameCN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameCN

  def first_name; end
  def last_first; end
  def last_name; end
  def name; end
end

FFaker::NameCN::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameCN::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameCS
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NameCS

  def first_name(for_sex = T.unsafe(nil)); end
  def last_name(for_sex = T.unsafe(nil)); end
  def name(for_sex = T.unsafe(nil)); end
  def prefix; end
  def suffix; end
  def with_same_sex(sex = T.unsafe(nil)); end

  private

  def select_sex(sex); end
end

FFaker::NameCS::FEMALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameCS::FEMALE_LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameCS::FIRST_NAMES = T.let(T.unsafe(nil), Hash)
FFaker::NameCS::GENDERS = T.let(T.unsafe(nil), Array)
FFaker::NameCS::LAST_NAMES = T.let(T.unsafe(nil), Hash)
FFaker::NameCS::MALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameCS::MALE_LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameCS::SUFFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameDA
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NameDA

  def any_name; end
  def female_name; end
  def first_name(gender = T.unsafe(nil)); end
  def last_name; end
  def male_name; end
  def name(gender = T.unsafe(nil)); end
  def prefix; end

  private

  def generate_name(first_name); end
end

FFaker::NameDA::FEMALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameDA::MALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameDA::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameDE
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NameDE

  def first_name; end
  def last_name; end
  def name; end
  def prefix; end
end

FFaker::NameDE::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameES
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils

  private

  def female_name_with_prefix; end
  def female_prefix; end
  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def male_name_with_prefix; end
  def male_prefix; end
  def name; end
  def name_with_prefix; end
  def prefix; end

  class << self
    def female_name_with_prefix; end
    def female_prefix; end
    def first_name; end
    def first_name_female; end
    def first_name_male; end
    def last_name; end
    def male_name_with_prefix; end
    def male_prefix; end
    def name; end
    def name_with_prefix; end
    def prefix; end
  end
end

FFaker::NameES::FEMALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameES::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameES::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameES::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameES::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameES::MALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameES::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameFR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameFR

  def first_name; end
  def last_name; end
  def name; end
  def prefix; end
end

FFaker::NameFR::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameFR::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameFR::PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::NameGA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameGA

  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def name; end
  def name_female; end
  def name_male; end
end

FFaker::NameGA::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameGA::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameGA::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameGR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameGR

  def female_first_name; end
  def female_full_name; end
  def female_last_name; end
  def first_name; end
  def full_name(gender = T.unsafe(nil)); end
  def last_name; end
  def male_first_name; end
  def male_full_name; end
  def male_last_name; end
  def name(gender = T.unsafe(nil)); end
end

FFaker::NameGR::FEMALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameGR::FEMALE_LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameGR::MALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameGR::MALE_LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameID
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameID

  def female_name_with_prefix; end
  def female_prefix; end
  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def male_name_with_prefix; end
  def male_prefix; end
  def name; end
  def name_with_prefix; end
  def prefix; end
end

FFaker::NameID::FEMALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameID::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameID::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameID::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameID::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameID::MALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameID::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameIN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameIN

  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def name; end
  def name_female; end
  def name_male; end
end

FFaker::NameIN::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameIN::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameIN::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameIT

  def first_name; end
  def last_name; end
  def name; end
  def prefix; end
end

FFaker::NameIT::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameIT::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameIT::PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::NameJA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameJA

  def first_name; end
  def last_first; end
  def last_name; end
  def name; end
end

FFaker::NameJA::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameJA::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameKH
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameKH

  def first_name; end
  def last_name; end
  def name; end
  def nick_name; end
end

FFaker::NameKH::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameKH::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameKR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameKR

  def first_name; end
  def last_first; end
  def last_name; end
  def name; end
  def name_with_space; end
end

FFaker::NameKR::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameKR::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameMX
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NameMX

  def female_name; end
  def female_prefix; end
  def first_name(gender = T.unsafe(nil)); end
  def full_name(gender = T.unsafe(nil), prefix = T.unsafe(nil)); end
  def full_name_no_prefix(gender = T.unsafe(nil)); end
  def full_name_prefix(gender = T.unsafe(nil)); end
  def last_name; end
  def male_name; end
  def male_prefix; end
  def middle_name(gender = T.unsafe(nil)); end
  def name(gender = T.unsafe(nil)); end
  def paternal_last_names; end
  def prefix; end
end

FFaker::NameMX::FEMALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameMX::FEMALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameMX::MALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameMX::MALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NameMX::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameNB
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NameNB

  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def name; end
  def prefix; end
end

FFaker::NameNB::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameNL
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NameNL

  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def name; end
  def prefix; end
end

FFaker::NameNL::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NamePH
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NamePH

  def last_name; end
  def name; end
end

FFaker::NamePH::AUTOCHTHONOUS_SURNAMES = T.let(T.unsafe(nil), Array)
FFaker::NamePH::SPANISH_SURNAMES = T.let(T.unsafe(nil), Array)

module FFaker::NamePL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NamePL

  def academic_degree_prefix; end
  def female_first_name; end
  def female_full_name; end
  def female_last_name; end
  def female_name_with_prefix; end
  def female_prefix; end
  def first_name(gender = T.unsafe(nil)); end
  def full_name(gender = T.unsafe(nil)); end
  def last_name(gender = T.unsafe(nil)); end
  def male_first_name; end
  def male_full_name; end
  def male_last_name; end
  def male_name_with_prefix; end
  def male_prefix; end
  def name(gender = T.unsafe(nil)); end
  def name_with_prefix(gender = T.unsafe(nil)); end
  def prefix; end

  private

  def name_for_gender(name_type, gender); end
end

FFaker::NamePL::ACADEMIC_DEGREE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NamePL::FEMALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NamePL::FEMALE_LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NamePL::FEMALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NamePL::GENDERS = T.let(T.unsafe(nil), Array)
FFaker::NamePL::MALE_FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NamePL::MALE_LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NamePL::MALE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::NamePL::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameRU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameRU

  def female_name; end
  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def last_name_female; end
  def last_name_male; end
  def male_name; end
  def middle_name_female; end
  def middle_name_male; end
  def name; end
end

FFaker::NameRU::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameRU::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameRU::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameRU::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameRU::LAST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameRU::LAST_NAMES_MALE = T.let(T.unsafe(nil), Array)

module FFaker::NameSE
  include ::FFaker::Name
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Name
  extend ::FFaker::NameSE

  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def name; end
  def prefix; end
end

FFaker::NameSE::PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::NameSN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameSN

  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def name_female; end
  def name_male; end
  def name_sn; end
  def prefix_female; end
  def prefix_male; end
end

FFaker::NameSN::PREFIX_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameSN::PREFIX_MALE = T.let(T.unsafe(nil), Array)

module FFaker::NameTH
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameTH

  def first_name; end
  def last_name; end
  def name; end
  def nick_name; end
end

FFaker::NameTH::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameTH::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameTHEN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameTHEN

  def first_name; end
  def last_name; end
  def name; end
  def nick_name; end
end

FFaker::NameTHEN::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameTHEN::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameTW
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameTW

  def first_name; end
  def last_name; end
  def name; end
end

FFaker::NameTW::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameTW::LAST_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NameUA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameUA

  def first_name; end
  def first_name_female; end
  def first_name_male; end
  def last_name; end
  def last_name_female; end
  def last_name_male; end
  def middle_name_female; end
  def middle_name_male; end
  def name; end
end

FFaker::NameUA::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameUA::FIRST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameUA::FIRST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameUA::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameUA::LAST_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameUA::LAST_NAMES_MALE = T.let(T.unsafe(nil), Array)
FFaker::NameUA::MIDDLE_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameUA::MIDDLE_NAMES_FEMALE = T.let(T.unsafe(nil), Array)
FFaker::NameUA::MIDDLE_NAMES_MALE = T.let(T.unsafe(nil), Array)

module FFaker::NameVN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NameVN

  def first_name; end
  def last_first; end
  def last_name; end
  def middle_name; end
  def name; end
end

FFaker::NameVN::FIRST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameVN::LAST_NAMES = T.let(T.unsafe(nil), Array)
FFaker::NameVN::MIDDLE_NAMES = T.let(T.unsafe(nil), Array)

module FFaker::NatoAlphabet
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::NatoAlphabet

  def alphabetic_code; end
  def callsign; end
  def code; end
  def codify(masks); end
  def numeric_code; end
end

FFaker::NatoAlphabet::ALPHABET_CODES = T.let(T.unsafe(nil), Array)
FFaker::NatoAlphabet::CODES = T.let(T.unsafe(nil), Array)
FFaker::NatoAlphabet::NUMERIC_CODES = T.let(T.unsafe(nil), Array)
FFaker::NatoAlphabet::STOP_CODE = T.let(T.unsafe(nil), String)

module FFaker::Number
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Number

  def decimal(whole_digits: T.unsafe(nil), fractional_digits: T.unsafe(nil)); end
  def number(digits: T.unsafe(nil)); end

  private

  def generate_pattern(digits); end
end

module FFaker::PhoneNumber
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumber

  def area_code; end
  def exchange_code; end
  def imei(serial_number = T.unsafe(nil)); end
  def phone_calling_code; end
  def phone_number; end
  def short_phone_number; end
end

module FFaker::PhoneNumberAU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberAU

  def country_code; end
  def home_work_phone_number; end
  def home_work_phone_prefix; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def mobile_phone_prefix; end
  def phone_number; end
  def phone_prefix; end
end

FFaker::PhoneNumberAU::HOME_WORK_OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberAU::MOBILE_OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberAU::OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberBR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberBR

  def country_code; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end

  private

  def number(prefixes, country_prefix = T.unsafe(nil)); end
  def random_space; end
end

FFaker::PhoneNumberBR::AREA_CODE = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberBR::COUNTRY_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberBR::HOME_WORK_PHONE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberBR::MOBILE_PHONE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberBR::PHONE_NUMBER = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberCH
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberCH

  def free_phone_number; end
  def home_work_phone_number; end
  def mobile_phone_number; end
  def phone_number; end
  def premium_rate_phone_number; end
  def shared_cost_phone_number; end
end

FFaker::PhoneNumberCH::AREA_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCH::COUNTRY_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCH::FREE_PHONE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCH::MOBILE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCH::PHONE_NUMBER = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCH::PREMIUM_RATE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCH::SHARED_COST_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberCU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberCU

  def country_code; end
  def e164_country_code; end
  def e164_home_work_phone_number; end
  def e164_mobile_phone_number; end
  def e164_phone_number; end
  def general_phone_number; end
  def home_work_phone_number; end
  def home_work_phone_prefix; end
  def international_country_code; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def mobile_phone_prefix; end
  def phone_number; end
  def phone_prefix; end
end

FFaker::PhoneNumberCU::HOME_WORK_OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCU::MOBILE_OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberCU::OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberDA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberDA

  def country_code; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end
end

module FFaker::PhoneNumberDE
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberDE

  def country_code; end
  def home_work_phone_number(leading_zero = T.unsafe(nil)); end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number(leading_zero = T.unsafe(nil)); end
  def mobile_prefix(leading_zero = T.unsafe(nil)); end
  def phone_number; end
  def region_prefix(leading_zero = T.unsafe(nil)); end
end

module FFaker::PhoneNumberFR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberFR

  def country_code; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end

  private

  def number(prefixes, country_prefix = T.unsafe(nil)); end
  def random_space; end
end

FFaker::PhoneNumberFR::AREA_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberFR::COUNTRY_CODE = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberFR::HOME_WORK_PHONE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberFR::MOBILE_PHONE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberFR::NON_AREA_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberFR::PHONE_NUMBER = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberFR::PHONE_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberID
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberID

  def home_phone_number; end
  def international_home_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end
end

FFaker::PhoneNumberID::COUNTRY_CODE = T.let(T.unsafe(nil), String)

module FFaker::PhoneNumberIT
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberIT

  def home_phone_number; end
  def mobile_phone_number; end
  def phone_number; end

  private

  def number(prefixes); end
  def random_space; end
end

FFaker::PhoneNumberIT::COUNTRY_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberIT::PHONE_NUMBER = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberJA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberJA

  def home_phone_number; end
  def home_phone_number_format(disit); end
  def home_phone_prefix(disit = T.unsafe(nil)); end
  def international_home_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def mobile_phone_number_format; end
  def mobile_prefix; end
  def phone_number; end

  private

  def select_home_phone_format(disit); end
end

FFaker::PhoneNumberJA::FOUR_DISIT_FORMAT = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberJA::IP_PHONE_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberJA::JAPAN_COUNTRY_CODE = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberJA::JAPAN_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberJA::MOBILE_NUMBER_FORMAT = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberJA::MOBILE_PHONE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberJA::ONE_DISIT_FORMAT = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberJA::THREE_DISIT_FORMAT = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberJA::TWO_DISIT_FORMAT = T.let(T.unsafe(nil), String)

module FFaker::PhoneNumberKR
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberKR

  def contry_code; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end
end

FFaker::PhoneNumberKR::HOME_PHONE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberKR::MOBILE_PHONE_PREFIXES = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberMX
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberMX

  def country_code; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end
  def toll_free_number; end
end

module FFaker::PhoneNumberNL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberNL

  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end
end

FFaker::PhoneNumberNL::AREA_CODE_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberNL::COUNTRY_CODE = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberNL::MOBILE_PHONE_NUMBER = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberNL::PHONE_NUMBER = T.let(T.unsafe(nil), Hash)

module FFaker::PhoneNumberPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils

  private

  def area_code; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def mobile_phone_number_format; end
  def mobile_prefix; end
  def phone_number; end
  def phone_number_format; end

  class << self
    def area_code; end
    def home_work_phone_number; end
    def international_home_work_phone_number; end
    def international_mobile_phone_number; end
    def international_phone_number; end
    def mobile_phone_number; end
    def mobile_phone_number_format; end
    def mobile_prefix; end
    def phone_number; end
    def phone_number_format; end
  end
end

FFaker::PhoneNumberPL::AREA_CODES = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberPL::COUNTRY_CODE = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberPL::MOBILE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberPL::PHONE_NUMBER_FORMAT = T.let(T.unsafe(nil), String)

module FFaker::PhoneNumberRU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberRU

  def country_code; end
  def home_work_phone_number; end
  def home_work_phone_prefix; end
  def international_country_code; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def international_toll_free_number; end
  def mobile_phone_number; end
  def mobile_phone_prefix; end
  def phone_number; end
  def toll_free_number; end

  private

  def build_phone_number(country_code, prefix); end
end

FFaker::PhoneNumberRU::COUNTRY_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberRU::INTERNATIONAL_COUNTRY_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberRU::TOLL_FREE_PREFIX = T.let(T.unsafe(nil), String)

module FFaker::PhoneNumberSE
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberSE

  def area_prefix; end
  def country_prefix; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def mobile_phone_number_format; end
  def mobile_prefix; end
  def phone_number; end
  def phone_number_format; end
end

FFaker::PhoneNumberSE::COUNTRY_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberSE::MOBILE_PHONE_FORMAT = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberSE::MOBILE_PHONE_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberSE::PHONE_FORMAT_PREFIX_2 = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberSE::PHONE_FORMAT_PREFIX_3 = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberSE::PHONE_FORMAT_PREFIX_4 = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberSG
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberSG

  def country_code; end
  def fixed_line_number; end
  def international_toll_free_number; end
  def mobile_number; end
  def mobile_or_pager_number; end
  def phone_number; end
  def premium_service_number; end
  def toll_free_number; end
  def voip_number; end
end

module FFaker::PhoneNumberSN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberSN

  def homework_number; end
  def homework_phone_prefix; end
  def mobile_number; end
  def mobile_phone_prefix; end
  def phone_number; end
  def short_phone_number; end
end

FFaker::PhoneNumberSN::HOME_WORK_OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberSN::MOBILE_OPERATORS_PREFIX = T.let(T.unsafe(nil), Array)

module FFaker::PhoneNumberTW
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberTW

  def contry_code; end
  def home_work_phone_number; end
  def international_home_work_phone_number; end
  def international_mobile_phone_number; end
  def international_phone_number; end
  def mobile_phone_number; end
  def phone_number; end
end

FFaker::PhoneNumberTW::HOME_PHONE_PREFIXES = T.let(T.unsafe(nil), Array)
FFaker::PhoneNumberTW::MOBILE_PHONE_PREFIX = T.let(T.unsafe(nil), String)

module FFaker::PhoneNumberUA
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::PhoneNumberUA

  def home_phone_number; end
  def international_home_phone_number; end
  def international_mobile_phone_number; end
  def mobile_phone_number; end
  def phone_number; end

  private

  def international_number(prefixes); end
  def local_number(prefixes); end
end

FFaker::PhoneNumberUA::COUNTRY_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberUA::LOCAL_PREFIX = T.let(T.unsafe(nil), String)
FFaker::PhoneNumberUA::PHONE_NUMBER = T.let(T.unsafe(nil), String)

module FFaker::Product
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Product

  def brand; end
  def letters(count); end
  def model; end
  def product; end
  def product_name; end
end

FFaker::Product::ADDON = T.let(T.unsafe(nil), Array)
FFaker::Product::B2 = T.let(T.unsafe(nil), Array)
FFaker::Product::START = T.let(T.unsafe(nil), Array)
FFaker::Product::SUFFIX = T.let(T.unsafe(nil), Array)
FFaker::Product::VOWELS = T.let(T.unsafe(nil), Array)

module FFaker::Random
  class << self
    def new_rng; end
    def rand(max = T.unsafe(nil)); end
    def reset!; end
    def rng; end
    def seed; end
    def seed=(new_seed); end
  end
end

module FFaker::RandomUtils
  def fetch_sample(list, options = T.unsafe(nil)); end
  def rand(max = T.unsafe(nil)); end
  def shuffle(list); end
end

module FFaker::SSN
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::SSN

  def ssn; end
end

module FFaker::SSNMX
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::SSNMX

  def imss; end
  def imss_undashed; end
  def issste; end
  def issste_undashed; end
  def ssn; end
  def ssn_undashed; end
end

module FFaker::SSNSE
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::SSNSE

  def ssn(opts = T.unsafe(nil)); end

  private

  def generate_ssn(from, to, gender); end
  def raise_error_on_bad_arguments(from, to, gender); end
  def random_birth_time_between(from = T.unsafe(nil), to = T.unsafe(nil)); end
  def random_region_even; end
  def random_region_for(gender); end
  def random_region_odd; end
  def three_character_string(number); end
end

FFaker::SSNSE::GENDERS = T.let(T.unsafe(nil), Array)

module FFaker::SemVer
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::SemVer

  def next(previous_version = T.unsafe(nil)); end
end

FFaker::SemVer::UPDATE = T.let(T.unsafe(nil), Array)

module FFaker::Skill
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Skill

  def specialties(num = T.unsafe(nil)); end
  def specialty; end
  def tech_skill; end
  def tech_skills(num = T.unsafe(nil)); end
end

module FFaker::Sport
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Sport

  def name; end
end

FFaker::Sport::NAMES = T.let(T.unsafe(nil), Array)

module FFaker::SportPL
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::SportPL

  def name; end
  def summer; end
  def winter; end
end

FFaker::SportPL::ALL = T.let(T.unsafe(nil), Array)
FFaker::SportPL::SUMMER = T.let(T.unsafe(nil), Array)
FFaker::SportPL::WINTER = T.let(T.unsafe(nil), Array)

module FFaker::SportRU
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::SportRU

  def name; end
  def summer; end
  def winter; end
end

FFaker::SportRU::ALL = T.let(T.unsafe(nil), Array)
FFaker::SportRU::SUMMER = T.let(T.unsafe(nil), Array)
FFaker::SportRU::WINTER = T.let(T.unsafe(nil), Array)

module FFaker::SportUS
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::SportUS

  def name; end
end

FFaker::SportUS::NAMES = T.let(T.unsafe(nil), Array)

module FFaker::String
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::String

  def from_regexp(exp); end

  private

  def generate_range(tokens); end
  def generate_token(token, tokens); end
  def process_token(tokens); end
  def special(token); end
end

FFaker::String::BACKSLASH = T.let(T.unsafe(nil), String)
FFaker::String::DASH = T.let(T.unsafe(nil), String)
FFaker::String::ESCAPEABLE_CHARS = T.let(T.unsafe(nil), Array)
FFaker::String::LETTERS = T.let(T.unsafe(nil), Array)
FFaker::String::LOWERS = T.let(T.unsafe(nil), Array)
FFaker::String::NUMBERS = T.let(T.unsafe(nil), Array)
FFaker::String::SPACES = T.let(T.unsafe(nil), Array)
FFaker::String::UPPERS = T.let(T.unsafe(nil), Array)
FFaker::String::WORD_CHARS = T.let(T.unsafe(nil), Array)

module FFaker::Time
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Time

  def between(from, to); end
  def date(params = T.unsafe(nil)); end
  def datetime(params = T.unsafe(nil)); end
  def day_of_week(options = T.unsafe(nil)); end
  def month; end

  private

  def convert_to_time(value); end
end

FFaker::Time::DAYS_OF_WEEK = T.let(T.unsafe(nil), Array)
FFaker::Time::MONTHS = T.let(T.unsafe(nil), Array)

module FFaker::Tweet
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Tweet

  def body(required_length = T.unsafe(nil)); end
  def mention; end
  def mentions(num = T.unsafe(nil)); end
  def tags(num_tags = T.unsafe(nil)); end
  def tweet(args = T.unsafe(nil)); end
end

class FFaker::UniqueUtils
  def initialize(generator, max_retries); end

  def clear; end
  def method_missing(name, *arguments); end

  private

  def add_results_to_hash(name, *arguments); end
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    def clear; end
  end
end

class FFaker::UniqueUtils::RetryLimitExceeded < ::StandardError; end

module FFaker::Unit
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Unit

  def temperature_abbr; end
  def temperature_name; end
  def time_abbr; end
  def time_name; end

  private

  def temperature; end
  def time; end
end

FFaker::Unit::TEMPERATURE_UNITS = T.let(T.unsafe(nil), Array)
FFaker::Unit::TIME_UNITS = T.let(T.unsafe(nil), Array)

module FFaker::UnitEnglish
  include ::FFaker::Unit
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Unit
  extend ::FFaker::UnitEnglish

  def area_abbr; end
  def area_name; end
  def length_abbr; end
  def length_name; end
  def liquid_abbr; end
  def liquid_name; end
  def mass_abbr; end
  def mass_name; end
  def volume_abbr; end
  def volume_name; end

  private

  def area; end
  def length; end
  def liquid; end
  def mass; end
  def volume; end
end

FFaker::UnitEnglish::AREA_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitEnglish::LENGTH_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitEnglish::LIQUID_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitEnglish::MASS_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitEnglish::VOLUME_UNITS = T.let(T.unsafe(nil), Array)

module FFaker::UnitMetric
  include ::FFaker::Unit
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Unit
  extend ::FFaker::UnitMetric

  def area_abbr; end
  def area_name; end
  def length_abbr; end
  def length_name; end
  def liquid_abbr; end
  def liquid_name; end
  def mass_abbr; end
  def mass_name; end
  def volume_abbr; end
  def volume_name; end

  private

  def area; end
  def length; end
  def liquid; end
  def mass; end
  def volume; end
end

FFaker::UnitMetric::AREA_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitMetric::LENGTH_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitMetric::LIQUID_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitMetric::MASS_UNITS = T.let(T.unsafe(nil), Array)
FFaker::UnitMetric::VOLUME_UNITS = T.let(T.unsafe(nil), Array)
FFaker::VERSION = T.let(T.unsafe(nil), String)

module FFaker::Vehicle
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Vehicle

  def base_color; end
  def drivetrain; end
  def engine_cylinders; end
  def engine_displacement; end
  def fuel_type; end
  def interior_upholstery; end
  def make; end
  def manufacturer_color(count = T.unsafe(nil)); end
  def mfg_color(count = T.unsafe(nil)); end
  def model; end
  def transmission; end
  def transmission_abbr; end
  def trim; end
  def vin; end
  def year; end
end

FFaker::Vehicle::CYLINDERS = T.let(T.unsafe(nil), Array)
FFaker::Vehicle::DRIVETRAINS = T.let(T.unsafe(nil), Array)
FFaker::Vehicle::TRANSMISSIONS_ABBR = T.let(T.unsafe(nil), Array)
FFaker::Vehicle::YEARS = T.let(T.unsafe(nil), Array)

module FFaker::Venue
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Venue

  def name; end
end

FFaker::Venue::VENUE_LIST = T.let(T.unsafe(nil), Array)

module FFaker::Youtube
  extend ::FFaker::RandomUtils
  extend ::FFaker::ModuleUtils
  extend ::FFaker::Youtube

  def embed_url; end
  def share_url; end
  def url; end
  def video_id; end
end
